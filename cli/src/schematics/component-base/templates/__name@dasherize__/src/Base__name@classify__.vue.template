<template>
  <div class="base-<%= dasherize(name) %>">
    Base<%= classify(name) %> Working!
  </div>
</template>

<script lang="ts">
import { defineComponent, PropType, computed, ref } from 'vue'
import { Base<%= classify(name) %>Adapter, Base<%= classify(name) %>Output } from './Base<%= classify(name) %>.adapter'
import { <%= underscore(name).toLocaleUpperCase() %>_DEFAULT } from './Base<%= classify(name) %>.default'
import BaseComponentFactory from '@/core/factory/component-base.factory'
import { COMPONENT_TYPE } from '@/core/dtos/factories.dto'
export default defineComponent({
  props: {
    config: {
      type: Object as PropType<<%= classify(name) %>Adapter>,
      required: true
    },
    compName: {
      type: String,
      default: String
    },
    inner: Boolean
  },
  emits: ['output-change'],
  setup(props, ctx) {
    const $$type = ref(COMPONENT_TYPE.button)
    const Config = computed(() => {
      return { ...<%= underscore(name).toLocaleUpperCase() %>_DEFAULT, ...props.config }
    })
    const visable = computed(() => {
      const { hasPermission, permissionName, visable } = Config.value
      if (hasPermission && permissionName) {
        return visable && hasPermission(permissionName)
      }
      return visable
    })
    const output = computed(
      (): ButtonOutput => {
        return {
          config: Config.value
        }
      }
    )
    const { mergeEventsAndDasherizeKeys, bindConfig } = BaseComponentFactory(
      props,
      { Config, output, $$type },
      ctx
    )
    return {
      visable,
      Config,
      bindConfig,
      mergeEventsAndDasherizeKeys
    }
  }
})
</script>


<style lang="scss">
@import "<%= exportScssPath %>";

@include b(base-<%= dasherize(name) %>) {}
</style>
